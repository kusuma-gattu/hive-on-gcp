prerequites:
load the car_insurance_cold_calls data into hdfs location:
give below command on local terminal:
gcloud compute scp car_insurance_cold_calls.csv kusuma_gatt@cluster-hadoop-m:/home/kusuma_gattu
open ssh in browser window on master node, then copy the csv file to hdfs location. for that give the below commands:
  * hdfs dfs -mkdir /car_insurance
  * hdfs dfs -ls /
  * hdfs dfs -put car_insurance_cold_calls.csv /car_insurance
start the hive shell:
hive
create database hive_db;
use hive_db;
create table car_insurance_cold_calls
    (
     id int,
     age int,
     job string,
     marital string,
     education string,
     default boolean,
     balance int,
     hhinsurance boolean,
     carloan boolean,
     communication string,
     lastcontactday int,
     lastcontactmonth string,
     noofcontacts int,
     dayspassed int,
     prevattempts int,
     outcome string,
     callstart string,
     callend string,
     carinsurance boolean
    )
    row format delimited
    fields terminated by ','
    location '/car_insurance'
    tblproperties("skip.header.line.count"="1");

Data Exploration tasks:
1. How many records are there in the dataset?
  SELECT COUNT(*) as total_records 
  FROM car_insurance_cold_calls;

2. How many unique jobs categories are present?
  SELECT COUNT(DISTINCT job) 
  FROM car_insurance_cold_calls;

3. What is the age distribution of customers in the dataset? Provide a breakdown by age group: 18-30, 31-45, 46-60, 61+
  SELECT
   SUM(CASE WHEN age <= 30 AND age >=18 THEN 1 ELSE 0 END) AS 18to30,
   SUM(CASE WHEN age <=45 AND age >= 31 THEN 1 ELSE 0 END) AS 31to45,
   SUM(CASE WHEN age <=60 AND age >= 46 THEN 1 ELSE 0 END) AS 46to60,
   SUM(CASE WHEN age >= 61 then 1 else 0 end) as 60plus
  FROM car_insurance_cold_calls;

4. Count the number of records that have missing values in any field.
  SELECT COUNT(*) AS total_missing_data_tuples 
  FROM car_insurance_cold_calls
  WHERE
       education = 'NA' OR
       communication = 'NA' OR
       outcome = 'NA';

5. Determine the number of unique 'Outcome' values and their respective counts.
   SELECT outcome, 
          COUNT(*) AS number_of_outcomes
   FROM car_insurance_cold_calls
   GROUP BY outcome;

6.Find the number of customers who have both a car loan and home insurance.
  SELECT COUNT(*) AS customers_with_car_loan_and_home_insurance
  FROM car_insurance_cold_calls
  WHERE hhinsurance = 1 
  AND carloan = 1;
